deploy:
  runs-on: ubuntu-latest
  permissions:
    id-token: write
  needs: build
  env:
    version: ${{ needs.build.outputs.version }}
  steps:
    - name: Download distribution artifact
      uses: actions/download-artifact@v4
      with:
        name: package

    - name: Authenticate to AWS using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        audience: sts.amazonaws.com
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.CI_IAM_ROLE }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up machine emulation
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker build
      uses: docker/setup-buildx-action@v3

    - name: Build and push container image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: 'jwt-pizza-service'
      run: |
        docker build --platform=linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY --push .
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_ENV

    - name: Create ECS cluster if it doesnâ€™t exist
      run: |
        aws ecs create-cluster --cluster-name jwt-pizza-service --region us-east-1 || echo "Cluster already exists"

    - name: Register task definition
      run: |
        aws ecs register-task-definition --family jwt-pizza-task --network-mode awsvpc --requires-compatibilities FARGATE --cpu "256" --memory "512" --execution-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/ecsTaskExecutionRole --container-definitions '[{"name":"jwt-pizza-service","image":"${{ env.image }}","portMappings":[{"containerPort":80,"hostPort":80}]}]' --region us-east-1

    - name: Create or update ECS service
      run: |
        aws ecs describe-services --cluster jwt-pizza-service --services jwt-pizza-service --region us-east-1 || \
        aws ecs create-service --cluster jwt-pizza-service --service-name jwt-pizza-service --task-definition jwt-pizza-task --desired-count 1 --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}" --region us-east-1
        aws ecs update-service --cluster jwt-pizza-service --service jwt-pizza-service --force-new-deployment --region us-east-1

    - name: Annotate deployment in Grafana
      run: |
        curl -s -X POST https://jonahk12.grafana.net/api/annotations -H "Authorization: Bearer ${{ secrets.GRAFANA_ACCESS_TOKEN }}" -H "Content-Type:application/json" -d '{"dashboardUID":"eegcmfzgyoe80b", "panelId":2, "tags":["backend","production"], "text":"Version '"$version"' deployed" }'
